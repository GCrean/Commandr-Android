buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
    }
}
apply plugin: 'com.android.application'
repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':apptentive-android-sdk')
    compile 'com.github.gabrielemariotti.cards:library:1.7.3'
    compile 'com.google.android.gms:play-services:5.0.77'
    compile 'com.github.gabrielemariotti.cards:library-extra:1.7.3'
    // You must install or update the Support Repository through the SDK manager to use this dependency.
    compile 'com.android.support:support-v13:19.+'
    compile 'com.readystatesoftware.systembartint:systembartint:1.0.3'
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"
    defaultConfig {
        versionCode 7
        versionName '2.3'
    }

    lintOptions {
        disable 'AndroidLintMissingTranslation'
        abortOnError false
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')

    }
    final Console console = System.console();
    if (console != null) {
        signingConfigs {
            productionConfig {
                storeFile file("commandrkeystore.jks")
                storePassword new String(System.console().readPassword("\n\$ Enter keystore password: "))
                keyAlias "commandr"
                keyPassword new String(System.console().readPassword("\n\$ Enter key password: "))
            }
        }
    } else {

        // Building from IDE's "Run" button
        signingConfigs {
            productionConfig {

            }
        }

    }
    buildTypes {
        debug {

        }
        release {
            runProguard true
            signingConfig signingConfigs.productionConfig

            proguardFile 'proguard-android.txt'
            applicationVariants.all { variant ->
                def file = variant.outputFile

                variant.outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.getVersionName() + ".apk")) // manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
            }
        }

    }
}

def toCamelCase(String string) {
    String result = ""
    string.findAll("[^\\W]+") { String word ->
        result += word.capitalize()
    }
    return result
}

afterEvaluate { project ->
    Configuration runtimeConfiguration = project.configurations.getByName('compile')
    ResolutionResult resolution = runtimeConfiguration.incoming.resolutionResult
    // Forces resolve of configuration
    ModuleVersionIdentifier module = resolution.getAllComponents().find {
        it.moduleVersion.name.equals("play-services")
    }.moduleVersion

    String prepareTaskName = "prepare${toCamelCase("${module.group} ${module.name} ${module.version}")}Library"
    File playServiceRootFolder = project.tasks.find { it.name.equals(prepareTaskName) }.explodedDir

    Task stripPlayServices = project.tasks.create(name: 'stripPlayServices', group: "Strip") {
        inputs.files new File(playServiceRootFolder, "classes.jar")
        outputs.dir playServiceRootFolder
        description 'Strip useless packages from Google Play Services library to avoid reaching dex limit'

        doLast {
            copy {
                from(file(new File(playServiceRootFolder, "classes.jar")))
                into(file(playServiceRootFolder))
                rename { fileName ->
                    fileName = "classes_orig.jar"
                }
            }
            tasks.create(name: "stripPlayServices" + module.version, type: Jar) {
                destinationDir = playServiceRootFolder
                archiveName = "classes.jar"
                from(zipTree(new File(playServiceRootFolder, "classes_orig.jar"))) {
                    exclude "com/google/ads/**"
                    exclude "com/google/android/gms/analytics/**"
                    exclude "com/google/android/gms/games/**"
                    exclude "com/google/android/gms/maps/**"
                    exclude "com/google/android/gms/panorama/**"
                    exclude "com/google/android/gms/plus/**"
                    exclude "com/google/android/gms/drive/**"
                    exclude "com/google/android/gms/ads/**"
                    exclude "com/google/android/gms/wallet/**"
                    exclude "com/google/android/gms/wearable/**"
                }
            }.execute()
            delete {
                delete(file(new File(playServiceRootFolder, "classes_orig.jar")))
            }
        }
    }

    project.tasks.findAll {
        it.name.startsWith('prepare') && it.name.endsWith('Dependencies')
    }.each { Task task ->
        task.dependsOn stripPlayServices
    }
}